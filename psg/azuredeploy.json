{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ownerName": {
      "type": "string",
      "metadata": {
        "description": "Define Owner Name"
      }
    },
    "serviceName": {
      "type": "string",
      "metadata": {
        "description": "Define Service Name"
      }
    },
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Define Environment Name"
      }
    },
    "myMobileIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Define My Mobile IP Address"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Define Password"
      }
    },
    "publicSshKeyID": {
      "type": "string",
      "metadata": {
        "description": "Define Public SSH Key ID"
      }
    }
  },
  "variables": {
    // 全てのリソースで共有する変数
    "location": "[resourceGroup().location]",
    "tags": {
      "Owner": "[parameters('ownerName')]",
      "Service": "[parameters('serviceName')]",
      "Env": "[parameters('environmentName')]"
    },
    // "resources" の "type" 毎に変数を block 形式で書く。
    // リソースネーム = [serviceName]-[environmentName]-*
    "virtualNetworks": {
      "vnet01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-','vnet01')]",
        "prefix": "10.2.0.0/16",
        "subnet01": {
          "name": "subnet01",
          "prefix": "10.2.1.0/24"
        }
      }
    },
    "networkSecurityGroups": {
      "sg01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-sg01')]"
      }
    },
    "publicIPAddresses": {
      "pubip01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-public01')]",
        "dnsName": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01-',uniqueString(resourceGroup().name))]"
      }
    },
    "applicationSecurityGroups": {
      "asg01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-asg01')]"
      }
    },
    "networkInterfaces": {
      "nic01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-nic01')]",
        "ipconf01name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-nic01-ipconf01')]"
      }
    },
    "storageAccounts": {
      "storage01": {
        "name": "[concat('pg01log',uniqueString(resourceGroup().name))]"
      },
      "storage02": {
        "name": "[concat('data01',uniqueString(resourceGroup().name))]"
      }
    },
    "virtualMachines": {
      "vm01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01')]",
        "computerName": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01')]",
        "adminUsername": "[concat(parameters('serviceName'),parameters('environmentName'),'vm01','admin')]",
        "osDiskName": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01-osDisk')]"
      }
    },
    "dbForPostgreSQL": {
      "pg01": {
        "name": "[concat(parameters('serviceName'),parameters('environmentName'),'pg01-',uniqueString(resourceGroup().name))]",
        "administratorLogin": "postgres"
      }
    },
    "roleAssignments": {
      "vm01storage01": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "name": "[guid(resourceId('Microsoft.Compute/virtualMachines',variables('virtualMachines').vm01.name),resourceId('Microsoft.Storage/storageAccounts',variables('storageAccounts').storage01.name))]"
      },
      "pg01storage01": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "name": "[guid(resourceId('Microsoft.DBforPostgreSQL/servers',variables('dbForPostgreSQL').pg01.name),resourceId('Microsoft.Storage/storageAccounts',variables('storageAccounts').storage01.name))]"
      },
      "vm01storage02": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "name": "[guid(resourceId('Microsoft.Compute/virtualMachines',variables('virtualMachines').vm01.name),resourceId('Microsoft.Storage/storageAccounts',variables('storageAccounts').storage02.name))]"
      },
      "pg01storage02": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "name": "[guid(resourceId('Microsoft.DBforPostgreSQL/servers',variables('dbForPostgreSQL').pg01.name),resourceId('Microsoft.Storage/storageAccounts',variables('storageAccounts').storage02.name))]"
      }
    },
    // resourceID() は以下に全て記述する。
    // outputs で resourceID をそのまま object 形式で出力する。
    // 各リソースで参照する場合は必ず dependsOn にも記述する。
    "resourceID": {
      "vnet01": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworks').vnet01.name)]",
      "subnet01": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworks').vnet01.name,variables('virtualNetworks').vnet01.subnet01.name)]",
      "pubip01": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddresses').pubip01.name)]",
      "asg01": "[resourceId('Microsoft.Network/applicationSecurityGroups',variables('applicationSecurityGroups').asg01.name)]",
      "nsg01": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('networkSecurityGroups').sg01.name)]",
      "nic01": "[resourceId('Microsoft.Network/networkInterfaces',variables('networkInterfaces').nic01.name)]",
      "storage01": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccounts').storage01.name)]",
      "storage02": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccounts').storage02.name)]",
      "vm01": "[resourceId('Microsoft.Compute/virtualMachines',variables('virtualMachines').vm01.name)]",
      "pg01": "[resourceId('Microsoft.DBforPostgreSQL/servers',variables('dbForPostgreSQL').pg01.name)]"
    }
  },
  "resources": [
    {
      "comments": "Virtual Network.",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworks').vnet01.name]",
      "apiVersion": "2020-05-01",
      "dependsOn": [
        "[variables('resourceID').nsg01]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworks').vnet01.prefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('virtualNetworks').vnet01.subnet01.name]",
            "properties": {
              "addressPrefix": "[variables('virtualNetworks').vnet01.subnet01.prefix]",
              "networkSecurityGroup": {
                "id": "[variables('resourceID').nsg01]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage",
                  "locations": ["[variables('location')]"]
                },
                {
                  "service": "Microsoft.Sql",
                  "locations": ["[variables('location')]"]
                }
              ],
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "comments": "Public IP",
      "name": "[variables('publicIPAddresses').pubip01.name]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "location": "[variables('location')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('publicIPAddresses').pubip01.dnsName]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": "[variables('tags')]"
    },
    {
      "comments": "Application Security Group",
      "name": "[variables('applicationSecurityGroups').asg01.name]",
      "type": "Microsoft.Network/applicationSecurityGroups",
      "apiVersion": "2020-05-01",
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {}
    },
    {
      "comments": "Network Security Group",
      "name": "[variables('networkSecurityGroups').sg01.name]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "dependsOn": [
        "[variables('resourceID').asg01]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "securityRules": [
          {
            "name": "mymobile_to_nic01",
            "properties": {
              "description": "Allow SSH from my mobile ip address",
              "direction": "Inbound",
              "access": "Allow",
              "priority": 1002,
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "[parameters('myMobileIpAddress')]",
              "destinationPortRange": "22",
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('resourceID').asg01]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "comments": "Network Inerface",
      "name": "[variables('networkInterfaces').nic01.name]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "dependsOn": [
        "[variables('resourceID').pubip01]",
        "[variables('resourceID').vnet01]",
        "[variables('resourceID').asg01]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('networkInterfaces').nic01.ipconf01name]",
            "properties": {
              "primary": true,
              "subnet": {
                "id": "[variables('resourceID').subnet01]"
              },
              "privateIPAddressVersion": "IPv4",
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[variables('resourceID').pubip01]"
              },
              "applicationSecurityGroups": [
                {
                  "id": "[variables('resourceID').asg01]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "comments": "Storage Account",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccounts').storage01.name]",
      "apiVersion": "2019-06-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "dependsOn": [
        "[variables('resourceID').vnet01]"
      ],
      "tags": "[variables('tags')]",
      "properties": {
        "allowBlobPublicAccess": false,
        "supportsHttpsTrafficOnly": true,
        "accessTier": "Hot",
        "networkAcls": {
          "defaultAction": "Deny",
          // Add permissions to the server Identity to the storage account.
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[variables('resourceID').subnet01]",
              "action": "Allow"
            }
          ],
          "ipRules": [
            {
              "value": "[parameters('myMobileIpAddress')]",
              "action": "Allow"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
          "apiVersion": "2020-03-01-preview",
          "tags": "[variables('tags')]",
          "name": "[concat(variables('storageAccounts').storage01.name, '/Microsoft.Authorization/', variables('roleAssignments').vm01storage01.name)]",
          "dependsOn": [
            "[variables('resourceID').vm01]",
            "[variables('resourceID').storage01]"
          ],
          "properties": {
            "roleDefinitionId": "[variables('roleAssignments').vm01storage01.roleDefinitionId]",
            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('virtualMachines').vm01.name), '2019-07-01', 'Full').identity.principalId]",
            "scope": "[variables('resourceID').storage01]",
            "principalType": "ServicePrincipal"
          }
        },
        {
          "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
          "apiVersion": "2020-03-01-preview",
          "tags": "[variables('tags')]",
          "name": "[concat(variables('storageAccounts').storage01.name, '/Microsoft.Authorization/', variables('roleAssignments').pg01storage01.name)]",
          "dependsOn": [
            "[variables('resourceID').pg01]",
            "[variables('resourceID').storage01]"
          ],
          "properties": {
            "roleDefinitionId": "[variables('roleAssignments').pg01storage01.roleDefinitionId]",
            "principalId": "[reference(variables('resourceID').pg01, '2017-12-01', 'Full').identity.principalId]",
            "scope": "[variables('resourceID').storage01]",
            "principalType": "ServicePrincipal"
          }
        }
      ]
    },
    {
      "comments": "Storage Account",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccounts').storage02.name]",
      "apiVersion": "2019-06-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "dependsOn": [
        "[variables('resourceID').vnet01]"
      ],
      "tags": "[variables('tags')]",
      "properties": {
        "allowBlobPublicAccess": false,
        "supportsHttpsTrafficOnly": true,
        "accessTier": "Hot",
        "networkAcls": {
          "defaultAction": "Deny",
          // Add permissions to the server Identity to the storage account.
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[variables('resourceID').subnet01]",
              "action": "Allow"
            }
          ],
          "ipRules": [
            {
              "value": "[parameters('myMobileIpAddress')]",
              "action": "Allow"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
          "apiVersion": "2020-03-01-preview",
          "tags": "[variables('tags')]",
          "name": "[concat(variables('storageAccounts').storage02.name, '/Microsoft.Authorization/', variables('roleAssignments').vm01storage02.name)]",
          "dependsOn": [
            "[variables('resourceID').vm01]",
            "[variables('resourceID').storage02]"
          ],
          "properties": {
            "roleDefinitionId": "[variables('roleAssignments').vm01storage02.roleDefinitionId]",
            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('virtualMachines').vm01.name), '2019-07-01', 'Full').identity.principalId]",
            "scope": "[variables('resourceID').storage02]",
            "principalType": "ServicePrincipal"
          }
        },
        {
          "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
          "apiVersion": "2020-03-01-preview",
          "tags": "[variables('tags')]",
          "name": "[concat(variables('storageAccounts').storage02.name, '/Microsoft.Authorization/', variables('roleAssignments').pg01storage02.name)]",
          "dependsOn": [
            "[variables('resourceID').pg01]",
            "[variables('resourceID').storage02]"
          ],
          "properties": {
            "roleDefinitionId": "[variables('roleAssignments').pg01storage02.roleDefinitionId]",
            "principalId": "[reference(variables('resourceID').pg01, '2017-12-01', 'Full').identity.principalId]",
            "scope": "[variables('resourceID').storage02]",
            "principalType": "ServicePrincipal"
          }
        }
      ]
    },
    {
      "comments": "Virtual Machine",
      "name": "[variables('virtualMachines').vm01.name]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[variables('resourceID').nic01]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": "[variables('tags')]",
      "properties": {
        "osProfile": {
          "computerName": "[variables('virtualMachines').vm01.computerName]",
          "adminUsername": "[variables('virtualMachines').vm01.adminUsername]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/',variables('virtualMachines').vm01.adminUsername, '/.ssh/authorized_keys')]",
                  "keyData": "[reference(parameters('publicSshKeyID'),'2020-12-01').publicKey]"
                }
              ]
            }
          }
        },
        "hardwareProfile": {
          "vmSize": "Standard_DS2_v2"
        },
        "storageProfile": {
          "imageReference": {
            // Get-AzVMImagePublisher -Location eastus | Out-File publisher.txt
            "publisher": "OpenLogic",
            // Get-AzVMImageOffer -Location eastus -PublisherName OpenLogic | Out-File offer.txt
            "offer": "CentOS",
            // Get-AzVMImageSku -Location eastus -PublisherName OpenLogic -Offer CentOS | Out-File sku.txt
            "sku": "8_3",
            // Get-AzVMImage -Location eastus -PublisherName OpenLogic -Offer CentOS -Skus 8_3 | Out-File version.txt
            "version": "latest"
          },
          "osDisk": {
            // Cannot attach an existing OS disk if the VM is created from a platform, user or a shared gallery image.
            "name": "[variables('virtualMachines').vm01.osDiskName]",
            "osType": "Linux",
            "diskSizeGB": 127,
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          }/*,
          "dataDisks": [ 
            /* 
              [root]# parted /dev/sdb
              (parted) p
                  Number  Start   End     Size    File system  Name                  Flags
                  14      1049kB  5243kB  4194kB                                     bios_grub
                  15      5243kB  524MB   519MB   fat16        EFI System Partition  boot, esp
                  1       525MB   1050MB  524MB   xfs
                  2       1050MB  68.7GB  67.7GB                                     lvm
              (parted) mkpart
                  Partition name?  []? "Linux Filesystem"
                  File system type?  [ext2]? xfs                                            
                  Start? 68.7GB                                                             
                  End? 100% 
              (parted) p 
                  Number  Start   End     Size    File system  Name                  Flags
                  14      1049kB  5243kB  4194kB                                     bios_grub
                  15      5243kB  524MB   519MB   fat16        EFI System Partition  boot, esp
                  1       525MB   1050MB  524MB   xfs
                  2       1050MB  68.7GB  67.7GB                                     lvm
                  3       68.7GB  275GB   206GB   xfs          Linux Filesystem
              [root]# parted /dev/sdb --script mklabel gpt mkpart lvmrootvg xfs 68.7GB  100%
              [root]# parted /dev/sdc --script mklabel gpt mkpart lvmrootvg xfs 0% 100%
              [root]# pvcreate /dev/sdb3 /dev/sdc1
              [root]# pvdisplay
              [root]# vgextend rootvg /dev/sdb3
              [root]# vgextend rootvg /dev/sdc1
              [root]# vgdisplay
              [root]# lvextend -L +100G /dev/rootvg/homelv
              [root]# xfs_growfs /dev/mapper/rootvg-homelv
              [root]# lsblk
             
            {
              "lun": 0,
              "name": "[variables('virtualMachines').vm01.dataDiskName01]",
              "managedDisk": {
                "id": "[variables('resourceID').vm01dataDisk01]"
              },
              "createOption": "Attach",
              "caching": "ReadWrite"
            }
          ]*/
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              // The ECDSA host key for psg-dev-vm01-dgyf3zeehekww.eastus.cloudapp.azure.com has changed
              // ssh-keygen -R dba-stg-vm01-b2aswtpvua6go.eastus.cloudapp.azure.com
              "properties": {
                "primary": true
              },
              "id": "[variables('resourceID').nic01]"
            }
          ]
        }
      },
      "resources": [
        {
          // https://docs.microsoft.com/ja-jp/azure/virtual-machines/extensions/agent-linux
          // https://github.com/Azure/WALinuxAgent
          "name": "installDBAtools",
          "type": "extensions",
          "location": "[variables('location')]",
          "apiVersion": "2019-03-01",
          "dependsOn": [
            "[variables('resourceID').vm01]"
          ],
          "tags": "[variables('tags')]",
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "https://raw.githubusercontent.com/atsushikoizumi/azure_arm_v1/master/psg/customscript.sh"
              ]
            },
            "protectedSettings": {
              // https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/custom-script-linux
              "commandToExecute": "[concat('bash customscript.sh ',variables('virtualMachines').vm01.adminUsername)]"
            }
          }
        }
      ]
    },
    {
      // PostgreSQL on Windows Server
      "type": "Microsoft.DBforPostgreSQL/servers",
      "name": "[variables('dbForPostgreSQL').pg01.name]",
      "apiVersion": "2017-12-01",
      "identity": {
        "type": "SystemAssigned"
      },
      "sku": {
        // Install-Module Az.PostgreSql
        // Get-AzPostgreSqlFlexibleServerLocationBasedCapability -Location eastus
        "name": "GP_Gen5_2",
        "tier": "GeneralPurpose",
        "capacity": 2,
        "family": "Gen5"
      },
      "properties": {
        "version": "11",
        "sslEnforcement": "Enabled",
        "minimalTlsVersion": "TLS1_2",
        "infrastructureEncryption": "Disabled",
        "publicNetworkAccess": "Enabled",
        "storageProfile": {
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled",
          "storageMB": 102400,
          "storageAutogrow": "Enabled"
        },
        "createMode": "Default",
        "administratorLogin": "[variables('dbForPostgreSQL').pg01.administratorLogin]",
        "administratorLoginPassword": "[parameters('adminPassword')]"
      },
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      // ログ
      // https://docs.microsoft.com/ja-jp/azure/postgresql/concepts-server-logs
      // https://docs.microsoft.com/ja-jp/azure/postgresql/concepts-audit
      "resources": [
        {
          "name": "[concat(variables('dbForPostgreSQL').pg01.name,'/virtualNetworkRules01')]",
          "type": "Microsoft.DBforPostgreSQL/servers/virtualNetworkRules",
          "apiVersion": "2017-12-01",
          "properties": {
            "virtualNetworkSubnetId": "[variables('resourceID').subnet01]",
            "ignoreMissingVnetServiceEndpoint": false
          },
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ]
        },
        {
          "name": "[concat(variables('dbForPostgreSQL').pg01.name,'/microsoft.insights/diagnosticSettings01')]",
          "type": "Microsoft.DBforPostgreSQL/servers/providers/diagnosticSettings",
          "apiVersion": "2017-05-01-preview",
          //"location": "[variables('location')]",
          "dependsOn": [
            "[variables('resourceID').pg01]",
            "[variables('resourceID').storage01]"
          ],
          "properties": {
            "storageAccountId": "[variables('resourceID').storage01]",
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 35
                }
              }
            ],
            "logs": [
              {
                // https://docs.microsoft.com/ja-jp/azure/postgresql/concepts-audit
                // pgAudit is in preview on Azure Database for PostgreSQL. The extension can be enabled on General Purpose and Memory Optimized servers only.
                "category": "PostgreSQLLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 35
                }
              },
              {
                "category": "QueryStoreRuntimeStatistics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 35
                }
              },
              {
                "category": "QueryStoreWaitStatistics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 35
                }
              }
            ]
          }
        },
        {
          "name": "db01",
          "type": "databases",
          "apiVersion": "2017-12-01",
          "properties": {
            "charset": "utf8",
            "collation": "Japanese_Japan.932"
          },
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ]
        },
        {
          "type": "configurations",
          "apiVersion": "2017-12-01",
          "name": "shared_preload_libraries",
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ],
          "properties": {
            "value": "pgaudit",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "apiVersion": "2017-12-01",
          "name": "timezone",
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ],
          "properties": {
            "value": "Asia/Tokyo",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "apiVersion": "2017-12-01",
          "name": "log_lock_waits",
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ],
          "properties": {
            "value": "ON",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "apiVersion": "2017-12-01",
          "name": "log_disconnections",
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ],
          "properties": {
            "value": "on",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "apiVersion": "2017-12-01",
          "name": "deadlock_timeout",
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ],
          "properties": {
            "value": "60000",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "apiVersion": "2017-12-01",
          "name": "log_min_duration_statement",
          "dependsOn": [
            "[variables('resourceID').pg01]"
          ],
          "properties": {
            "value": "600000",
            "source": "user-override"
          }
        }
      ]
    }
  ],
  "outputs": {
    "resourceID": {
      "type": "object",
      "value": "[variables('resourceID')]"
    },
    "dnsName": {
      "type": "object",
      "value": {
        "vm01": {
          "fqdn": "[reference(variables('resourceID').pubip01).dnsSettings.fqdn]",
          "adminUsername": "[variables('virtualMachines').vm01.adminUsername]"
        }
      }
    }
  }
}