{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.5.0.0",
  "parameters": {
    "ownerName": {
      "type": "string",
      "metadata": {
        "description": "Define Owner Name"
      }
    },
    "serviceName": {
      "type": "string",
      "metadata": {
        "description": "Define Service Name"
      }
    },
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Define Environment Name"
      }
    },
    "myHomeIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Define My Home IP Address"
      }
    },
    "myMobileIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Define My Mobile IP Address"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Define Password"
      }
    }
  },
  "variables": {
    // 全てのリソースで共有する変数
    "location": "[resourceGroup().location]",
    "tags": {
      "Owner": "[parameters('ownerName')]",
      "Service": "[parameters('serviceName')]",
      "Env": "[parameters('environmentName')]"
    },
    // "resources" の "type" 毎に変数を block 形式で書く。
    // リソースネーム = [serviceName]-[environmentName]-*
    "virtualNetworks": {
      "vnet01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-','vnet01')]",
        "prefix": "10.1.0.0/16",
        "subnet01": {
          "name": "subnet01",
          "prefix": "10.1.1.0/24"
        }
      }
    },
    "networkSecurityGroups": {
      "sg01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-sg01')]"
      }
    },
    "publicIPAddresses": {
      "pubip01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-public01')]",
        "dnsName": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01-',uniqueString(resourceGroup().name))]"
      }
    },
    "applicationSecurityGroups": {
      "asg01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-asg01')]"
      }
    },
    "networkInterfaces": {
      "nic01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-nic01')]",
        "ipconf01name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-nic01-ipconf01')]"
      }
    },
    "storageAccounts": {
      "storage01": {
        "name": "[concat(parameters('serviceName'),parameters('environmentName'),'storage01')]"
      }
    },
    "virtualMachines": {
      "vm01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01')]",
        "computerName": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01')]",
        "adminUsername": "[concat(parameters('serviceName'),parameters('environmentName'),'vm01','admin')]",
        "osDiskName": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01-osDisk')]",
        "dataDiskName01": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01-dataDisk01')]",
        "dataDiskName02": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01-dataDisk02')]",
        "dataDiskName03": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01-dataDisk03')]",
        "SqlIaaSAgent": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-vm01', '/SqlIaasExtension')]"
      }
    },
    "sqlVirtualMachines": {
      "sqlonvm01": {
        "name": "[concat(parameters('serviceName'),'-',parameters('environmentName'),'-sqlonvm01')]",
        "sqlAuthUpdateUserName" : "[concat(parameters('serviceName'),parameters('environmentName'),'sqladmin')]"
      }
    },
    // resourceID() は以下に全て記述する。
    // outputs で resourceID をそのまま object 形式で出力する。
    // 各リソースで参照する場合は必ず dependsOn にも記述する。
    "resourceID": {
      "vnet01": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworks').vnet01.name)]",
      "subnet01": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworks').vnet01.name,variables('virtualNetworks').vnet01.subnet01.name)]",
      "pubip01": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddresses').pubip01.name)]",
      "asg01": "[resourceId('Microsoft.Network/applicationSecurityGroups',variables('applicationSecurityGroups').asg01.name)]",
      "nsg01": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('networkSecurityGroups').sg01.name)]",
      "nic01": "[resourceId('Microsoft.Network/networkInterfaces',variables('networkInterfaces').nic01.name)]",
      "storage01": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccounts').storage01.name)]",
      "vm01": "[resourceId('Microsoft.Compute/virtualMachines',variables('virtualMachines').vm01.name)]",
      "vm01dataDisk01": "[resourceId('Microsoft.Compute/disks',variables('virtualMachines').vm01.dataDiskName01)]",
      "vm01dataDisk02": "[resourceId('Microsoft.Compute/disks',variables('virtualMachines').vm01.dataDiskName02)]",
      "vm01dataDisk03": "[resourceId('Microsoft.Compute/disks',variables('virtualMachines').vm01.dataDiskName03)]",
      "SqlIaaSAgent01": "[resourceId('Microsoft.Compute/virtualMachines/extensions',variables('virtualMachines').vm01.name,'SqlIaasExtension')]",
      "sqlonvm01": "[resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines',variables('sqlVirtualMachines').sqlonvm01.name)]"
    }
  },
  "resources": [
    {
      "comments": "Virtual Network.",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworks').vnet01.name]",
      "apiVersion": "2020-05-01",
      "dependsOn": [
        "[variables('resourceID').nsg01]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworks').vnet01.prefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('virtualNetworks').vnet01.subnet01.name]",
            "properties": {
              "addressPrefix": "[variables('virtualNetworks').vnet01.subnet01.prefix]",
              "networkSecurityGroup": {
                "id": "[variables('resourceID').nsg01]"
              },
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "comments": "Public IP",
      "name": "[variables('publicIPAddresses').pubip01.name]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "location": "[variables('location')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('publicIPAddresses').pubip01.dnsName]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": "[variables('tags')]"
    },
    {
      "comments": "Application Security Group",
      "name": "[variables('applicationSecurityGroups').asg01.name]",
      "type": "Microsoft.Network/applicationSecurityGroups",
      "apiVersion": "2020-05-01",
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {}
    },
    {
      "comments": "Network Security Group",
      "name": "[variables('networkSecurityGroups').sg01.name]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "dependsOn": [
        "[variables('resourceID').asg01]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "securityRules": [
          {
            "name": "myhome_nic01",
            "properties": {
              "description": "Allow RDP from my home ip address",
              "direction": "Inbound",
              "access": "Allow",
              "priority": 1001,
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "[parameters('myHomeIpAddress')]",
              "destinationPortRange": "3389",
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('resourceID').asg01]"
                }
              ]
            }
          },
          {
            "name": "mymobile_nic01",
            "properties": {
              "description": "Allow RDP from my mobile ip address",
              "direction": "Inbound",
              "access": "Allow",
              "priority": 1002,
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "[parameters('myMobileIpAddress')]",
              "destinationPortRange": "3389",
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('resourceID').asg01]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "comments": "Network Inerface",
      "name": "[variables('networkInterfaces').nic01.name]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "dependsOn": [
        "[variables('resourceID').pubip01]",
        "[variables('resourceID').vnet01]",
        "[variables('resourceID').asg01]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('networkInterfaces').nic01.ipconf01name]",
            "properties": {
              "primary": true,
              "subnet": {
                "id": "[variables('resourceID').subnet01]"
              },
              "privateIPAddressVersion": "IPv4",
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[variables('resourceID').pubip01]"
              },
              "applicationSecurityGroups": [
                {
                  "id": "[variables('resourceID').asg01]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "comments": "Storage Account",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccounts').storage01.name]",
      "apiVersion": "2019-06-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Compute/disks",
      "apiVersion": "2019-07-01",
      "name": "[variables('virtualMachines').vm01.dataDiskName01]",
      "location": "[variables('location')]",
      "properties": {
        "osType": "Windows",
        "diskIOPSReadWrite": 500,
        "diskMBpsReadWrite": 60,
        "diskSizeGB": 256,
        "creationData": {
          "createOption": "Empty"
        },
        "encryption": {
          "type": "EncryptionAtRestWithPlatformKey"
        }
      },
      "sku": {
        "name": "StandardSSD_LRS"
      }
    },
    {
      "type": "Microsoft.Compute/disks",
      "apiVersion": "2019-07-01",
      "name": "[variables('virtualMachines').vm01.dataDiskName02]",
      "location": "[variables('location')]",
      "properties": {
        "osType": "Windows",
        "diskIOPSReadWrite": 500,
        "diskMBpsReadWrite": 60,
        "diskSizeGB": 256,
        "creationData": {
          "createOption": "Empty"
        },
        "encryption": {
          "type": "EncryptionAtRestWithPlatformKey"
        }
      },
      "sku": {
        "name": "StandardSSD_LRS"
      }
    },
    {
      "type": "Microsoft.Compute/disks",
      "apiVersion": "2019-07-01",
      "name": "[variables('virtualMachines').vm01.dataDiskName03]",
      "location": "[variables('location')]",
      "properties": {
        "osType": "Windows",
        "diskIOPSReadWrite": 500,
        "diskMBpsReadWrite": 60,
        "diskSizeGB": 256,
        "creationData": {
          "createOption": "Empty"
        },
        "encryption": {
          "type": "EncryptionAtRestWithPlatformKey"
        }
      },
      "sku": {
        "name": "StandardSSD_LRS"
      }
    },
    {
      "comments": "Virtual Machine",
      "name": "[variables('virtualMachines').vm01.name]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[variables('resourceID').nic01]",
        "[variables('resourceID').vm01dataDisk01]",
        "[variables('resourceID').vm01dataDisk02]",
        "[variables('resourceID').vm01dataDisk03]"
      ],
      "tags": "[variables('tags')]",
      "properties": {
        "osProfile": {
          "computerName": "[variables('virtualMachines').vm01.computerName]",
          "adminUsername": "[variables('virtualMachines').vm01.adminUsername]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": true,
            "enableAutomaticUpdates": true,
            "timeZone": "Tokyo Standard Time"
          }
        },
        "hardwareProfile": {
          "vmSize": "Standard_DS2_v2"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftSQLServer",
            // az vm image list-offers -l eastus -p MicrosoftSQLServer -o table
            "offer": "sql2019-ws2019",
            "sku": "standard",
            "version": "latest"
          },
          "osDisk": {
            // Cannot attach an existing OS disk if the VM is created from a platform, user or a shared gallery image.
            "name": "[variables('virtualMachines').vm01.osDiskName]",
            "osType": "Windows",
            "diskSizeGB": 128,
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          },
          "dataDisks": [
            // start --> diskmgmt.msc (Disk Management wizard)
            {
              "lun": 0,
              "name": "[variables('virtualMachines').vm01.dataDiskName01]",
              "managedDisk": {
                "id": "[variables('resourceID').vm01dataDisk01]"
              },
              "createOption": "Attach",
              "caching": "ReadWrite"
            },
            {
              "lun": 1,
              "name": "[variables('virtualMachines').vm01.dataDiskName02]",
              "managedDisk": {
                "id": "[variables('resourceID').vm01dataDisk02]"
              },
              "createOption": "Attach",
              "caching": "ReadWrite"
            },
            {
              "lun": 2,
              "name": "[variables('virtualMachines').vm01.dataDiskName03]",
              "managedDisk": {
                "id": "[variables('resourceID').vm01dataDisk03]"
              },
              "createOption": "Attach",
              "caching": "ReadWrite"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('resourceID').nic01]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('resourceID').storage01, '2019-06-01').primaryEndpoints['blob']]"
          }
        }
      },
      "resources": [
        {
          // SQL Server IaaS Agent 拡張機能追加
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "apiVersion": "2020-06-01",
          "name": "[variables('virtualMachines').vm01.SqlIaaSAgent]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[variables('resourceID').vm01]"
          ],
          "properties": {
            "type": "SqlIaaSAgent",
            "publisher": "Microsoft.SqlServer.Management",
            // Get-AzVmImagePublisher -Location eastus | Get-AzVMExtensionImageType | Get-AzVMExtensionImage
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "AutoTelemetrySettings": {
                "Region": "[variables('location')]"
              }
            }
          }
        }
      ]
    },
    {
      "comments": "SQL Server on Virtual Machine",
      // sqlVirtualMachines name is same as the virtual machine name provided on VirtualMachineResourceId property.
      "name": "[variables('virtualMachines').vm01.name]",
      "type": "Microsoft.SqlVirtualMachine/sqlVirtualMachines",
      "apiVersion": "2017-03-01-preview",
      "dependsOn": [
        "[variables('resourceID').SqlIaaSAgent01]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "virtualMachineResourceId": "[variables('resourceID').vm01]",
        // sqlImageOffer is same as the Virtual Machine imageReference.
        "sqlImageOffer": "sql2019-ws2019",
        "sqlServerLicenseType": "PAYG",
        "sqlManagement": "Full",  // required by autoBackupSettings,autoPatchingSettings
        "sqlImageSku": "standard",
        "autoPatchingSettings": {
          "enable": true,
          "dayOfWeek": "Monday",
          "maintenanceWindowStartingHour": 1,  // int
          "maintenanceWindowDuration": 60  // 30 - 180
        },
        "autoBackupSettings": {
          // https://docs.microsoft.com/ja-jp/azure/azure-sql/virtual-machines/windows/automated-backup
          // require storageAccountUrl & storageAccessKey
          "enable": true,
          "enableEncryption": false,
          "backupScheduleType": "Manual",
          "retentionPeriod": 7,
          "backupSystemDbs": true,
          "storageAccountUrl": "[reference(variables('resourceID').storage01, '2019-06-01').primaryEndpoints['blob']]",
          "storageAccessKey": "[listKeys(variables('resourceID').storage01,'2019-06-01').keys[0].value]"
          // "Manual" require the following
          ,"fullBackupFrequency": "Daily", // or "Weekly"
          "fullBackupStartTime": 18,
          "fullBackupWindowHours": 2,
          "logBackupFrequency": 30
        },
        "serverConfigurationsManagementSettings": {
          "sqlConnectivityUpdateSettings": {
            "connectivityType": "PRIVATE",
            "port": 1433,
            "sqlAuthUpdateUserName": "[variables('sqlVirtualMachines').sqlonvm01.sqlAuthUpdateUserName]",
            "sqlAuthUpdatePassword": "[parameters('adminPassword')]"
          }
        },
        "storageConfigurationSettings": {
          "sqlDataSettings": {
            "luns": [
              0
            ],
            // Value cannot be null. Parameter name: path
            // https://gitmemory.com/issue/terraform-providers/terraform-provider-azurerm/7481/686282403
            "defaultFilePath": "F:\\MSsql\\Data"
          },
          "sqlLogSettings": {
            "luns": [
              1
            ],
            "defaultFilePath": "L:\\MSsql\\Logs"
          },
          "sqlTempDbSettings": {
            "luns": [
              2
            ],
            "defaultFilePath": "T:\\MSsql\\TempDB"
          },
          "diskConfigurationType": "NEW",
          "storageWorkloadType": "GENERAL"
        }
      }
    }
  ],
  "outputs": {
    "resourceID": {
      "type": "object",
      "value": "[variables('resourceID')]"
    },
    "dnsName": {
      "type": "object",
      "value": {
        "vm01": {
          "fqdn": "[reference(variables('resourceID').pubip01).dnsSettings.fqdn]",
          "adminUsername": "[variables('virtualMachines').vm01.adminUsername]",
          "sqlAuthUpdateUserName": "[variables('sqlVirtualMachines').sqlonvm01.sqlAuthUpdateUserName]"
        }
      }
    }
  }
}